"""Script for training of a GM classifier model"""
import json
import argparse

import pandas as pd

import gm_classifier as gm


def train(
    output_dir: str,
    features_ffp: str,
    label_ffp: str,
    config_ffp: str,
    record_list_ffp: str = None,
    val_split: float = 0.1,
):
    # Get the training data
    features_df = pd.read_csv(features_ffp, index_col="record_id")
    label_df = pd.read_csv(label_ffp, index_col="record_id")

    # Read the model & training config
    with open(config_ffp, "r") as f:
        config = json.load(f)

    record_ids_filter = (
        gm.records.get_record_ids_filter(record_list_ffp)
        if record_list_ffp is not None
        else None
    )

    gm.training.train(
        output_dir,
        features_df,
        label_df,
        config,
        record_ids_filter=record_ids_filter,
        val_split=val_split,
    )


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("output_dir", help="Output directory", type=str)
    parser.add_argument(
        "features_ffp",
        help="csv file with all the features, "
        "as generated by the 'extract_features' script",
        type=str,
    )
    parser.add_argument(
        "label_ffp",
        help="CSV file with the scores for each record, "
        "required columns: ['record_id', 'score']",
    )
    parser.add_argument(
        "config_ffp", help="Config file, that contains model and training details"
    )
    parser.add_argument(
        "--record_list_ffp",
        type=str,
        help="Path to file that lists all records to use (one per line)",
        default=None,
    )
    parser.add_argument(
        "--val_split",
        type=str,
        help="The proportion of the labelled data to use for validation",
        default=0.1,
    )

    args = parser.parse_args()

    train(
        args.output_dir,
        args.features_ffp,
        args.label_ffp,
        args.config_ffp,
        args.record_list_ffp,
    )
